##1
lst1=[]
lst2=[]

for i in range(2):

    a = int(input("Enter element {} of pair 1:".format(i + 1)))
    lst1.append(a)
    b = int(input("Enter element {} of pair 2:".format(i + 1)))
    lst2.append(b)


c = [(a, b) for a in lst1 for b in lst2]
print("The Cartesian Product is : " ,c)
d=int(input("Enter a number to check relation:"))
e=int(input("Enter another number to check it's relation with the 1st number:"))

if (d,e) or (e,d) in c:
    if (d,e) and (e,d) in c:
        print("There is a relation between the given pair and it's SYMMETRIC")
        if (d,d) and (e,e) in c:
            print("There is a relation between the given pair and it's REFLEXIVE")
            f = int(input("Enter another number to check it's relation with in case of Transitive:"))
            if (d,e) and (e,f) and (d,f) in c:
                print("There is a relation between the given pair and it's TRANSITIVE")
            else:
                print("There is a relation between the given pair")
        else:
            print("There is a relation between the given pair")
    else:
        print("There is a relation between the given pair")
else:
    print("There is NO relation between the given pair")


##3

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def childNode(self, data):
        if data == self.data:
            return

        if data < self.data:
            if self.left:
                self.left.childNode(data)
            else:
                self.left = Node(data)
        else:
            if self.right:
                self.right.childNode(data)
            else:
                self.right = Node(data)


    def determine_child(self,data):
        child = []
        if self.data == data:
            if self.left:
                child += self.left.determine_child(data)

            elif self.right:
                child += self.right.determine_child(data)
        else:
            if data < self.data:
                if self.left:
                    return self.left.determine_child(data)

            if data > self.data:
                if self.right:
                    return self.right.determine_child(data)

        return child


def build_tree(elements):
    print("Building tree with these elements:",elements)
    root = Node(elements[0])

    for i in range(1,len(elements)):
        root.childNode(elements[i])
    return root

def select_tree():
    numbers = []
    nodes=0
    for i in range(5):
        nodes = int(input("Enter the nodes in your tree:"))
        numbers.append(nodes)
    return numbers


if __name__ == '__main__':
    numbers_tree = build_tree(select_tree())
    s = int(input("Enter the node of which you want to determine the children:"))
    print("Childs are:",numbers_tree.determine_child(s))

